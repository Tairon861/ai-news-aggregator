<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>AI News Aggregator - Full Text</title><link>https://Tairon861.github.io/ai-news-aggregator/feed.xml</link><description>Recent AI News with Full Content</description><atom:link href="https://Tairon861.github.io/ai-news-aggregator/feed.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 12 Oct 2025 06:28:26 +0000</lastBuildDate><item><title>Is vibe coding ruining a generation of engineers? (AI | VentureBeat)</title><link>https://venturebeat.com/ai/is-vibe-coding-ruining-a-generation-of-engineers</link><description>[unable to retrieve full-text content]&lt;p&gt;AI tools are revolutionizing &lt;a href="https://venturebeat.com/ai/replacing-coders-with-ai-why-bill-gates-sam-altman-and-experience-say-you"&gt;software development&lt;/a&gt; by automating repetitive tasks, refactoring bloated code, and identifying bugs in real-time. Developers can now generate well-structured code from plain language prompts, saving hours of manual effort. These tools learn from vast codebases, offering context-aware recommendations that enhance productivity and reduce errors. Rather than starting from scratch, engineers can prototype quickly, iterate faster and focus on solving increasingly complex problems.&lt;/p&gt;&lt;p&gt;As code generation tools grow in popularity, they raise questions about the future size and structure of engineering teams. Earlier this year, Garry Tan, CEO of startup accelerator Y Combinator, noted that about one-quarter of its current clients use AI to write 95% or more of their software.&lt;a href="https://www.cnbc.com/2025/03/15/y-combinator-startups-are-fastest-growing-in-fund-history-because-of-ai.html"&gt; &lt;u&gt;In an interview with CNBC&lt;/u&gt;&lt;/a&gt;, Tan said: “What that means for founders is that you don’t need a team of 50 or 100 engineers, you don’t have to raise as much. The capital goes much longer.”&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.nytimes.com/2025/02/20/business/ai-coding-software-engineers.html"&gt;&lt;u&gt;AI-powered coding&lt;/u&gt;&lt;/a&gt; may offer a fast solution for businesses under budget pressure — but its long-term effects on the field and labor pool cannot be ignored.&lt;/p&gt;&lt;h2&gt;As AI-powered coding rises, human expertise may diminish&lt;/h2&gt;&lt;p&gt;&lt;b&gt;
&lt;/b&gt;In the &lt;a href="https://venturebeat.com/ai/why-99-of-companies-fail-at-ai-integration-and-how-to-join-the-1-that"&gt;era of AI&lt;/a&gt;, the traditional journey to coding expertise that has long supported senior developers may be at risk. Easy access to large language models (LLMs) enables junior coders to quickly identify issues in code. While this speeds up software development, it can distance developers from their own work, delaying the growth of core problem-solving skills. As a result, they may avoid the focused, sometimes uncomfortable hours required to build expertise and progress on the path to becoming successful senior developers.&lt;/p&gt;&lt;p&gt;Consider &lt;a href="https://venturebeat.com/ai/claude-can-now-process-entire-software-projects-in-single-request-anthropic-says"&gt;Anthropic’s Claude Code&lt;/a&gt;, a terminal-based assistant built on the Claude 3.7 Sonnet model, which automates bug detection and resolution, test creation and code refactoring. Using natural language commands, it reduces repetitive manual work and boosts productivity.&lt;/p&gt;&lt;p&gt;Microsoft has also released two open-source frameworks — &lt;a href="https://venturebeat.com/ai/microsoft-retires-autogen-and-debuts-agent-framework-to-unify-and-govern"&gt;AutoGen and Semantic Kernel&lt;/a&gt; — to support the development of agentic AI systems. AutoGen enables asynchronous messaging, modular components, and distributed agent collaboration to build complex workflows with minimal human input. Semantic Kernel is an SDK that integrates LLMs with languages like C#, Python and Java, letting developers build AI agents to automate tasks and manage enterprise applications.&lt;/p&gt;&lt;p&gt;The increasing availability of these tools from Anthropic, Microsoft and others may reduce opportunities for coders to refine and deepen their skills. Rather than “banging their heads against the wall” to debug a few lines or select a library to unlock new features, junior developers may simply turn to AI for an assist. This means senior coders with problem-solving skills honed over decades may become an endangered species.&lt;/p&gt;&lt;p&gt;Overreliance on AI for writing code risks weakening developers’ hands-on experience and understanding of key programming concepts. Without regular practice, they may struggle to independently debug, optimize or design systems. Ultimately, this erosion of skill can undermine critical thinking, creativity and adaptability — qualities that are essential not just for coding, but for assessing the quality and logic of AI-generated solutions.&lt;/p&gt;&lt;h2&gt;AI as mentor: Turning code automation into hands-on learning&lt;/h2&gt;&lt;p&gt;While concerns about AI diminishing human developer skills are valid, businesses shouldn’t dismiss AI-supported coding. They just need to think carefully about when and how to deploy AI tools in development. These tools can be more than productivity boosters; they can act as interactive mentors, guiding coders in real time with explanations, alternatives and best practices.&lt;/p&gt;&lt;p&gt;When u&lt;!-- --&gt;sed as a training tool, AI can reinforce learning by showing coders why code is broken and how to fix it—rather than simply applying a solution. For example, a junior developer using Claude Code might receive immediate feedback on inefficient syntax or logic errors, along with suggestions linked to detailed explanations. This enables active learning, not passive correction. It’s a win-win: Accelerating project timelines without doing all the work for junior coders.&lt;/p&gt;&lt;p&gt;Additionally, coding frameworks can support experimentation by letting developers prototype agent workflows or integrate LLMs without needing expert-level knowledge upfront. By observing how AI builds and refines code, junior developers who actively engage with these tools can internalize patterns, architectural decisions and debugging strategies — mirroring the traditional learning process of trial and error, code reviews and mentorship.&lt;/p&gt;&lt;p&gt;However, AI coding assistants shouldn’t replace real mentorship or pair programming. Pull requests and formal code reviews remain essential for guiding newer, less experienced team members. We are nowhere near the point at which AI can single-handedly upskill a junior developer.&lt;/p&gt;&lt;p&gt;Companies and educators can build structured development programs around these tools that emphasize code comprehension to ensure AI is used as a training partner rather than a crutch. This encourages coders to question AI outputs and requires manual refactoring exercises. In this way, AI becomes less of a replacement for human ingenuity and more of a catalyst for accelerated, experiential learning.&lt;/p&gt;&lt;h2&gt;Bridging the gap between automation and education&lt;/h2&gt;&lt;p&gt;When utilized with intention, AI doesn’t just write code; it teaches coding, blending automation with education to prepare developers for a future where deep understanding and adaptability remain indispensable.&lt;/p&gt;&lt;p&gt;By embracing AI as a mentor, as a programming partner and as a team of developers we can direct to the problem at hand, we can bridge the gap between effective automation and education. We can empower developers to grow alongside the tools they use. We can ensure that, as AI evolves, so too does the human skill set, fostering a generation of coders who are both efficient and deeply knowledgeable.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Richard Sonnenblick is chief data scientist at &lt;/i&gt;&lt;a href="https://www.planview.com/"&gt;&lt;i&gt;Planview&lt;/i&gt;&lt;/a&gt;&lt;i&gt;. &lt;/i&gt;&lt;/p&gt;</description><content:encoded>[unable to retrieve full-text content]&lt;p&gt;AI tools are revolutionizing &lt;a href="https://venturebeat.com/ai/replacing-coders-with-ai-why-bill-gates-sam-altman-and-experience-say-you"&gt;software development&lt;/a&gt; by automating repetitive tasks, refactoring bloated code, and identifying bugs in real-time. Developers can now generate well-structured code from plain language prompts, saving hours of manual effort. These tools learn from vast codebases, offering context-aware recommendations that enhance productivity and reduce errors. Rather than starting from scratch, engineers can prototype quickly, iterate faster and focus on solving increasingly complex problems.&lt;/p&gt;&lt;p&gt;As code generation tools grow in popularity, they raise questions about the future size and structure of engineering teams. Earlier this year, Garry Tan, CEO of startup accelerator Y Combinator, noted that about one-quarter of its current clients use AI to write 95% or more of their software.&lt;a href="https://www.cnbc.com/2025/03/15/y-combinator-startups-are-fastest-growing-in-fund-history-because-of-ai.html"&gt; &lt;u&gt;In an interview with CNBC&lt;/u&gt;&lt;/a&gt;, Tan said: “What that means for founders is that you don’t need a team of 50 or 100 engineers, you don’t have to raise as much. The capital goes much longer.”&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.nytimes.com/2025/02/20/business/ai-coding-software-engineers.html"&gt;&lt;u&gt;AI-powered coding&lt;/u&gt;&lt;/a&gt; may offer a fast solution for businesses under budget pressure — but its long-term effects on the field and labor pool cannot be ignored.&lt;/p&gt;&lt;h2&gt;As AI-powered coding rises, human expertise may diminish&lt;/h2&gt;&lt;p&gt;&lt;b&gt;
&lt;/b&gt;In the &lt;a href="https://venturebeat.com/ai/why-99-of-companies-fail-at-ai-integration-and-how-to-join-the-1-that"&gt;era of AI&lt;/a&gt;, the traditional journey to coding expertise that has long supported senior developers may be at risk. Easy access to large language models (LLMs) enables junior coders to quickly identify issues in code. While this speeds up software development, it can distance developers from their own work, delaying the growth of core problem-solving skills. As a result, they may avoid the focused, sometimes uncomfortable hours required to build expertise and progress on the path to becoming successful senior developers.&lt;/p&gt;&lt;p&gt;Consider &lt;a href="https://venturebeat.com/ai/claude-can-now-process-entire-software-projects-in-single-request-anthropic-says"&gt;Anthropic’s Claude Code&lt;/a&gt;, a terminal-based assistant built on the Claude 3.7 Sonnet model, which automates bug detection and resolution, test creation and code refactoring. Using natural language commands, it reduces repetitive manual work and boosts productivity.&lt;/p&gt;&lt;p&gt;Microsoft has also released two open-source frameworks — &lt;a href="https://venturebeat.com/ai/microsoft-retires-autogen-and-debuts-agent-framework-to-unify-and-govern"&gt;AutoGen and Semantic Kernel&lt;/a&gt; — to support the development of agentic AI systems. AutoGen enables asynchronous messaging, modular components, and distributed agent collaboration to build complex workflows with minimal human input. Semantic Kernel is an SDK that integrates LLMs with languages like C#, Python and Java, letting developers build AI agents to automate tasks and manage enterprise applications.&lt;/p&gt;&lt;p&gt;The increasing availability of these tools from Anthropic, Microsoft and others may reduce opportunities for coders to refine and deepen their skills. Rather than “banging their heads against the wall” to debug a few lines or select a library to unlock new features, junior developers may simply turn to AI for an assist. This means senior coders with problem-solving skills honed over decades may become an endangered species.&lt;/p&gt;&lt;p&gt;Overreliance on AI for writing code risks weakening developers’ hands-on experience and understanding of key programming concepts. Without regular practice, they may struggle to independently debug, optimize or design systems. Ultimately, this erosion of skill can undermine critical thinking, creativity and adaptability — qualities that are essential not just for coding, but for assessing the quality and logic of AI-generated solutions.&lt;/p&gt;&lt;h2&gt;AI as mentor: Turning code automation into hands-on learning&lt;/h2&gt;&lt;p&gt;While concerns about AI diminishing human developer skills are valid, businesses shouldn’t dismiss AI-supported coding. They just need to think carefully about when and how to deploy AI tools in development. These tools can be more than productivity boosters; they can act as interactive mentors, guiding coders in real time with explanations, alternatives and best practices.&lt;/p&gt;&lt;p&gt;When u&lt;!-- --&gt;sed as a training tool, AI can reinforce learning by showing coders why code is broken and how to fix it—rather than simply applying a solution. For example, a junior developer using Claude Code might receive immediate feedback on inefficient syntax or logic errors, along with suggestions linked to detailed explanations. This enables active learning, not passive correction. It’s a win-win: Accelerating project timelines without doing all the work for junior coders.&lt;/p&gt;&lt;p&gt;Additionally, coding frameworks can support experimentation by letting developers prototype agent workflows or integrate LLMs without needing expert-level knowledge upfront. By observing how AI builds and refines code, junior developers who actively engage with these tools can internalize patterns, architectural decisions and debugging strategies — mirroring the traditional learning process of trial and error, code reviews and mentorship.&lt;/p&gt;&lt;p&gt;However, AI coding assistants shouldn’t replace real mentorship or pair programming. Pull requests and formal code reviews remain essential for guiding newer, less experienced team members. We are nowhere near the point at which AI can single-handedly upskill a junior developer.&lt;/p&gt;&lt;p&gt;Companies and educators can build structured development programs around these tools that emphasize code comprehension to ensure AI is used as a training partner rather than a crutch. This encourages coders to question AI outputs and requires manual refactoring exercises. In this way, AI becomes less of a replacement for human ingenuity and more of a catalyst for accelerated, experiential learning.&lt;/p&gt;&lt;h2&gt;Bridging the gap between automation and education&lt;/h2&gt;&lt;p&gt;When utilized with intention, AI doesn’t just write code; it teaches coding, blending automation with education to prepare developers for a future where deep understanding and adaptability remain indispensable.&lt;/p&gt;&lt;p&gt;By embracing AI as a mentor, as a programming partner and as a team of developers we can direct to the problem at hand, we can bridge the gap between effective automation and education. We can empower developers to grow alongside the tools they use. We can ensure that, as AI evolves, so too does the human skill set, fostering a generation of coders who are both efficient and deeply knowledgeable.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Richard Sonnenblick is chief data scientist at &lt;/i&gt;&lt;a href="https://www.planview.com/"&gt;&lt;i&gt;Planview&lt;/i&gt;&lt;/a&gt;&lt;i&gt;. &lt;/i&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://venturebeat.com/ai/is-vibe-coding-ruining-a-generation-of-engineers</guid><pubDate>Sat, 11 Oct 2025 19:00:00 +0000</pubDate></item><item><title>Thinking Machines Lab co-founder Andrew Tulloch heads to Meta (AI News &amp; Artificial Intelligence | TechCrunch)</title><link>https://techcrunch.com/2025/10/11/thinking-machines-lab-co-founder-andrew-tulloch-heads-to-meta/</link><description>&lt;div&gt;&lt;img class="ff-og-image-inserted" src="https://techcrunch.com/wp-content/uploads/2025/01/GettyImages-2173579488.jpg?resize=1200,799" /&gt;&lt;/div&gt;&lt;p class="wp-block-paragraph" id="speakable-summary"&gt;Thinking Machines Lab, the AI startup led by former OpenAI CTO Mira Murati, has lost one of its co-founders to Meta.&lt;/p&gt;

&lt;p class="wp-block-paragraph"&gt;The Wall Street Journal reports that AI researcher Andrew Tulloch announced his departure to employees in a message on Friday. A Thinking Machine Labs spokesperson confirmed Tulloch’s departure to the WSJ, saying he “has decided to pursue a different path for personal reasons.”&lt;/p&gt;







&lt;p class="wp-block-paragraph"&gt;Back in August, the WSJ reported that Mark Zuckerberg’s aggressive AI recruiting blitz included an offer to acquire Thinking Machines Lab — and when that failed, Zuckerberg reportedly tried to lure Tulloch with a compensation package that could have been worth up to $1.5 billion over at least six years. (At the time, a Meta spokesperson said that the WSJ’s description of the offer was “inaccurate and ridiculous.”)&lt;/p&gt;

&lt;p class="wp-block-paragraph"&gt;Tulloch previously worked at OpenAI and Facebook’s AI Research Group.&lt;/p&gt;</description><content:encoded>&lt;div&gt;&lt;img class="ff-og-image-inserted" src="https://techcrunch.com/wp-content/uploads/2025/01/GettyImages-2173579488.jpg?resize=1200,799" /&gt;&lt;/div&gt;&lt;p class="wp-block-paragraph" id="speakable-summary"&gt;Thinking Machines Lab, the AI startup led by former OpenAI CTO Mira Murati, has lost one of its co-founders to Meta.&lt;/p&gt;

&lt;p class="wp-block-paragraph"&gt;The Wall Street Journal reports that AI researcher Andrew Tulloch announced his departure to employees in a message on Friday. A Thinking Machine Labs spokesperson confirmed Tulloch’s departure to the WSJ, saying he “has decided to pursue a different path for personal reasons.”&lt;/p&gt;







&lt;p class="wp-block-paragraph"&gt;Back in August, the WSJ reported that Mark Zuckerberg’s aggressive AI recruiting blitz included an offer to acquire Thinking Machines Lab — and when that failed, Zuckerberg reportedly tried to lure Tulloch with a compensation package that could have been worth up to $1.5 billion over at least six years. (At the time, a Meta spokesperson said that the WSJ’s description of the offer was “inaccurate and ridiculous.”)&lt;/p&gt;

&lt;p class="wp-block-paragraph"&gt;Tulloch previously worked at OpenAI and Facebook’s AI Research Group.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://techcrunch.com/2025/10/11/thinking-machines-lab-co-founder-andrew-tulloch-heads-to-meta/</guid><pubDate>Sat, 11 Oct 2025 19:10:37 +0000</pubDate></item></channel></rss>